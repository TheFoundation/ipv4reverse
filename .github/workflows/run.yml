name: GEN
on:
  push:
    branches:
      - 'master'
      - 'main'
  schedule:
    - cron: '0 0 1 * *'
jobs:
  premerge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          ref: 'pages'
          fetch-depth: '0'
      - name: PRE Pull Request Automerge
        run: echo "OPEN PR:" && gh pr list --limit 333 && gh pr list --limit 333 |grep mybranch_to_merge|cut  -f1 | while read a ;do echo "CLOSING $a";res=$(gh pr merge --delete-branch --squash --auto "$a" 2>&1 || true  ) ;echo "$res";echo "$res"|grep -i "rate limit" && (echo "RATE LIMIT..42s" ;sleep 61 ; gh pr merge --delete-branch --squash --auto "$a" 2>&1 || true  ) ;sleep 3;done|| true 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: DONE pre-merge
        run: echo DONE pre-merge
  preclean:
    needs: premerge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          ref: 'pages'
          fetch-depth: '0'
      - name: PRE Pull Request autoclean
        run: |
          git config --global user.email "actions@github.com" && git config --global user.name "you@example.com"
          git checkout pages
          tar czf /tmp/keep.tgz $(ls -1 README.md index.html ;test -e lists && echo lists) || true
          echo "prune pages (temp)"
          git checkout -b tmp-pages pages
          git branch -D pages
          echo orphan
          git switch --orphan pages

          echo reset
          git reset --hard
          echo emptycommit
          git commit --allow-empty -m "init"


          echo add
          echo hi > .init-empty-file
          test -e /tmp/keep.tgz && tar xzf /tmp/keep.tgz || true 
          find lists/ -empty -delete||true ;
          git add -A|| true
          echo commit
          git commit -m "init"
          echo push
          git push origin pages --force
          #git checkout -b old_pages pages
          #git branch -D pages
          #git checkout --orphan pages
          #git reset --hard
          #git commit --allow-empty -m "Initial commit"
          #git push origin pages:pages --force-with-lease
          #git checkout old_pages
          #git rebase origin/pages
          #git push origin my-feature-1:my-feature-1 --force-with-lease

          #bash -c "git switch pages;git reset --soft $(git merge-base pages HEAD)";
          #git commit -m "one commit on yourBranch" || true ;
          #git add -A
          #git push --force || true 
      - name: DONE pre-clean
        run: echo DONE pre-clean
 
  generate:
    needs: preclean
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 64
      matrix:
        oone: [1, 2, 3, 4, 5, 6, 7, 8, 9,     11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,      128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253]
        #arch: [linux_SLASH_amd64]
#        exclude:
#          - oone: 192
#            otwo: 168
        #  - os: alpine
        #    arch: linux_SLASH_arm_SLASH_v6
        #  - os: ubuntu-bionic
        #    arch: linux_SLASH_386
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.otwo }}
#      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "otwo=1" >> "$GITHUB_OUTPUT"
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          ref: 'pages'
          fetch-depth: '0'
          
      - name: List Files
        run: |
          find -type f      
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2
#        with:
#          python-version: "3.8"
      - name: Install dependencies
        run: |
          curl https://raw.githubusercontent.com/TheFoundation/ipv4reverse/master/inst-gen.sh >/tmp/inst-gen.sh
          bash /tmp/inst-gen.sh
      - name: Run thingy... 
        run: |
          git config --global user.email "actions@github.com" && git config --global user.name "you@example.com"
          echo "starting... _${{ matrix.oone }}"
          git branch -D rdns_automerge_${{ matrix.oone }} || true
          git checkout -b rdns_automerge_${{ matrix.oone }} pages
          git branch
          ((git pull --rebase  origin rdns_automerge_${{ matrix.oone }}  || git rebase --skip )|| ( git pull   origin rdns_automerge_${{ matrix.oone }} --allow-unrelated-histories || true ) )||true
          find lists/ -empty -delete
          curl https://raw.githubusercontent.com/TheFoundation/ipv4reverse/master/gen.sh >/tmp/gen.sh
          ( bash /tmp/gen.sh  ${{ matrix.oone }} ${{ steps.step1.outputs.otwo }} || true ) 2>&1|tee /tmp/gen.log|grep -i -e "|OK" -e fail -e error 
          ( git add -A 2&>&1 && git commit -m "automerge rdns_automerge_${{ matrix.oone }}" 2>&1  || true ) | tee /tmp/git.log
          echo "none" > /tmp/gitres
          bash -c 'git push --set-upstream origin rdns_automerge_${{ matrix.oone }} &>/tmp/gitres.log || true' || true 
          bash -c 'grep "othing to commit" /tmp/gitres.log || true' || true 
          (echo "# Auto merge from actions";echo;echo;echo "## git results";echo;echo '```';wc -l /tmp/git.log /tmp/gitres.log;cat /tmp/git.log /tmp/gitres.log;echo '```';echo "## generator results";echo;echo '```';wc -l /tmp/gen.log;cat /tmp/gen.log|grep -e OK -e NXDOMAIN -e REFUSE -e ERR -e SERVFAIL ;echo '```') > /tmp/pullreq.md
          exit 0
      - name: create pull request
        run: gh pr create -B pages -H rdns_automerge_${{ matrix.oone }} --label automerge --title 'Merge rdns_automerge_${{ matrix.oone }} into base_branch' --body-file /tmp/pullreq.md || true 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Request Automerge
        run: echo "OPEN PR:" && gh pr list --limit 333 && gh pr list --limit 333 |grep mybranch_to_merge|cut  -f1 | while read a ;do echo "CLOSING $a";res=$(gh pr merge --delete-branch --squash --auto "$a" 2>&1 || true  ) ;echo "$res";echo "$res"|grep -i "rate limit" && (echo "RATE LIMIT..42s" ;sleep 61 ; gh pr merge --delete-branch --squash --auto "$a" 2>&1 || true  ) ;sleep 3;done|| true 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  cleanruns:
    needs: generate
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 1
  merge:
    needs: generate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          ref: 'pages'
          fetch-depth: '0'
      - name: Enable Pull Request Automerge
        run: echo "OPEN PR:" && gh pr list --limit 333 && gh pr list --limit 333 |grep mybranch_to_merge|cut  -f1 | while read a ;do echo "CLOSING $a";res=$(gh pr merge --delete-branch --squash --auto "$a" 2>&1 || true  ) ;echo "$res";echo "$res"|grep -i "rate limit" && (echo "RATE LIMIT..42s" ;sleep 61 ; gh pr merge --delete-branch --squash --auto "$a" 2>&1 || true  ) ;sleep 3;done|| true 
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  archive:
    needs: merge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          ref: 'pages'
          fetch-depth: '0'
      - name: archive step
        run: |
          git config --global user.email "actions@github.com" && git config --global user.name "you@example.com"
          echo "generating archive"
          tar cvzf /tmp/keepa.tgz lists|wc -l 
          echo branch
          git branch
          echo "insert"
          git checkout archive && ( tar xvzf /tmp/keepa.tgz lists|wc -l ) && git add -A && git commit -m "ARCHIVE UPDATE "$(date +%Y-%m-%d_%H.%M) && git push
